Node.js is a open-source,crossplatform and runtime environment for executing javascript code 
outside of a browser.

used for making backend-services which is called API(Application Program Interface)

API : The data that the server send to the client.

In 2009 a person called Ryan Dohl, take the chrome javascript engine(v8) and embedded it inside 
a C++ Program and Called it Node.

Node is not a programming language and also it is not a framework, it is just a runtime environment
that execute javascript code outside the browser.

Node Applications are asynchronous by default.

example: in a Restaurant, a waiter take the order from a table and get it to the kitchen and then until
the kitchen cook the food, the waiter can server another table.
this is called asynchronous but if the waiter wait until the chef cook the food, this is called synchronous


Module:Every file in a node application  is called module that do it's own job. it means that in 
a node application we can have several modules that each module has it's own variables and functions and 
this functions are private, it means that they are not accessible out of that module,
but we can export theme to become visible in ohter modules.

built-in module in node:
some of important built-in modules:


1:"fs" module that allow us to work with files system

// const { readFileSync, writeFileSync } = require("fs");
// const path = require("path");
// const text = readFileSync("./content/subfolder/test.txt", "utf-8"); //10 sec

// console.log(text);

// writeFileSync("./content/subfolder/t.txt", "Hello world", {
//   flag: "a",
// });

const { readFile, writeFile } = require("fs");

readFile("./content/subfolder/test.txt", "utf-8", (err, result) => {
  if (err) {
    console.log(err);
    return;
  }
  console.log(result);
  writeFile(
    "./content/subfolder/t.txt",
    "Hello world\n",
    {
      flag: "a",
    },
    (err, result) => {
      if (err) {
        console.log(err);
        return;
      }
      console.log("Task is done");
    }
  );
});


2: "path" module that allow us to work with files path
const path = require("path");

path.sep ; //return the file seperator sign in your system

const filePath = path.join("content", "subfolder", "text.txt");

console.log("file Path is: " + filePath);

path.basename(filePath); //return the last portion of a path

console.log(__dirname); // absolute path of our prject excluding the last portion
console.log(__filename); // absolute path of our project including the last portion

const absolutePath = path.resolve(
  __dirname,
  "content",
  "subfolder",
  "test.txt"
);
console.log("absolute Path: " + absolutePath);



3: "os" module that allow us to get some information about our system:Ex: totalMem,freeMem,type,

const os = require("os");

//userInfo
console.log(os.userInfo());

//the system uptime in seconds

console.log(`System uptime  is ${os.uptime()}`);

//returns informatin about each logical CPU Core
console.log(os.cpus());

const currentOS = {
  name: os.type(), //return the operatin system name
  totalMemory: os.totalmem(), //total memory of the system in bytes
  freeMemory: os.freemem(), // amount of free memory in bytes
};

console.log(currentOS);

4: "http: module allow us to setup a server which is a popular built-in module.

const http = require("http"); //built-in module

// console.log(http.METHODS);
// GET: Read Data
// POST: insert Data 
// PUT: Update Data  ,updata an existing data
// Delete: delete a specific data from the server

const server = http.createServer((req, res) => {
  if (req.url === "/") {
    res.writeHead(200, "success", {
      "content-type": "text/plain",
    });
    // res.write("This is our homepage");
    res.write(`<h1>HomePage</h1>
    <p>Welcome to our web app</p>
    `);
    res.end();
  } else if (req.url === "/about") {
    res.statusCode = 200;
    res.statusMessage = "success";
    res.write(`<h1>AboutPage</h1>
    <p>short story</p>
    `);
    // res.write("About page");
    res.end();
  } else {
    res.statusCode = 404; // statusCode shows that the operation is successfull or not
    res.statusMessage = "Invalid URL ,Please Enter a valid URL";
    res.write(`
    <h1>Opps! Invalid URL</h1>
    <p>Page not found</p>
    <a href="/">Back to home</a>
    `);
    res.end();
  }
});

server.listen(5000, () => {
  console.log("server is listening on port 5000");
});

//200 success
//201 data added to server successfully
//404 not found


app.use() // used for setup a middleware